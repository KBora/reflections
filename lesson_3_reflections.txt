1 When would you want to use a remote repository rather than keeping all your work local?
  Collaboration with others, when you work on multiple machines, when you want a non-local copy of files
  
2 How do I push changes from local to GitHub repository?
  In the master branch (not sure if this is compulsory), git remote add origin <repository_url>
    'origin' is standard naming convention
  git push origin master
    This pushes the repository files to github. Will prompt for username and pwd if using https

3 What is a remote?
  Reference to another repository. When you clone a respository, a remote gets setup for your automatically
  
4 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	Because you may be making changes locally and you dont want git to override the changes with an automatic pull

5 What is a fork?
	A fork is a copy of another repository on github - very similar to clone - except it only applies to github.  Doesn't require local download of the github repository .. the forked copy stays on github.

6 Describe the differences between forks, clones, and branches. When would you use one instead of another?
    fork is a clone of another repository on github
    clone is a copy of another repository (locally or hosted somewhere)
    branches are labels for a sequence of commits
    use fork when you want to work on someone's github project
    clone when you want to create a new copy of a repository
    use branch when you need to make a moderate change to your code
    
7 Desribe the pull request process?
	push a branch to github
	create pull request
	collaborators can see that there is a pull request (email notification on pull request)
	'pull request' means 'can i merge/push my change into master?' aka 'please merge/pull my request into the master branch'
	collaborator can review changes by making a comment (inline comment)
	if change is OK, collaborator can click on 'merge pull request' button  (only avaialble if no conflicts available)

8 Merging Remote Changes
  Git keeps 'origin/master' ie. copy of the github master branch when you pull a change. This is updated when you run 'git fetch origin'. (ie. this fetches commits done by collaborators but does not update your local master)
  To merge these changes, run 'git merge master origin/master'
  The equivalent of these two commands is 'git pull origin master'. this does both a fetch and merge for you.

9 What is the benefit of having a copy of the last known state of the remote stored locally?
  It enables git to merge collaborator's changes when you run a pull (or fetch/merge) from the remote repository

10 What is a process workflow for getting feedback on changes?
  Create a branch locally, push branch to GitHub (but dont merge with master yet). push command example: push origin <branch_name>

11 Steps for 'Updating a Pull Request Quiz'
  a Create a different-oil branch
    git branch different-oil
    git checkout different-oil 
  b Make a commit different-oil changing the oil
    subl <file_name>
    git add <file_name>
    git commit <file_name>
  c Push different-oil to your fork
    git push origin different-oil
  d Create a pull request form different-oil into master
    In  GitHub click on pull request

12 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  Email trails, SMS, custom systems, other online tools eg basecamp
  Git/Github seems perfect for code. Git/Github may not be possible with non-tech savvy collaborators or in coding environments where code is not just text files...
  
13 Q. If I run git fetch and it picks up some changes.. how do I examine those changes?
???

14 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  It would seem neater to compartmentalise all non trivial changes into separate branches.. so that you can isolate the code for a specific feature in a branch. It allow people to provide feedback on the branch, so it could be good in a team. Has more overhead than working directly on the master. 
